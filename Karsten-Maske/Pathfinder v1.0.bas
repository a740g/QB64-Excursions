OPTION _EXPLICIT

_TITLE "Pathfinder v1.0 for QB64v1.3"
' done 2019-12-17 to 2019-12-18
' by Myself (Karsten Maske)
'
' ESC to exit program
' any other key restarts with creating a new random map
'
CONST ALICEBLUE = &HFFF0F8FF~& ' _RGB32(240,248,255)
CONST ALMOND = &HFFEFDECD~& '_RGB32(239,222,205)
CONST ANTIQUEBRASS = &HFFCD9575~& '_RGB32(205,149,117)
CONST ANTIQUEWHITE = &HFFFAEBD7~& ' _RGB32(250,235,215)
CONST APRICOT = &HFFFDD9B5~& '_RGB32(253,217,181)
CONST AQUA = &HFF00FFFF~& ' _RGB32(0,255,255)
CONST AQUAMARINE = &HFF7FFFD4~& ' _RGB32(127,255,212)
CONST ASPARAGUS = &HFF87A96B~& '_RGB32(135,169,107)
CONST ATOMICTANGERINE = &HFFFFA474~& '_RGB32(255,164,116)
CONST AZURE = &HFFF0FFFF~& ' _RGB32(240,255,255)
CONST BANANAMANIA = &HFFFAE7B5~& '_RGB32(250,231,181)
CONST BEAVER = &HFF9F8170~& '_RGB32(159,129,112)
CONST BEIGE = &HFFF5F5DC~& ' _RGB32(245,245,220)
CONST BISQUE = &HFFFFE4C4~& ' _RGB32(255,228,196)
CONST BITTERSWEET = &HFFFD7C6E~& '_RGB32(253,124,110)
CONST BLACK = &HFF000000~& ' _RGB32(0,0,0)
CONST BLANCHEDALMOND = &HFFFFEBCD~& ' _RGB32(255,235,205)
CONST BLIZZARDBLUE = &HFFACE5EE~& '_RGB32(172,229,238)
CONST BLUE = &HFF0000FF~& ' _RGB32(0,0,255)
CONST BLUEBELL = &HFFA2A2D0~& '_RGB32(162,162,208)
CONST BLUEGRAY = &HFF6699CC~& '_RGB32(102,153,204)
CONST BLUEGREEN = &HFF0D98BA~& '_RGB32(13,152,186)
CONST BLUEVIOLET = &HFF8A2BE2~& ' _RGB32(138,43,226)
CONST BLUSH = &HFFDE5D83~& '_RGB32(222,93,131)
CONST BRICKRED = &HFFCB4154~& '_RGB32(203,65,84)
CONST BROWN = &HFFA52A2A~& ' _RGB32(165,42,42)
CONST BURLYWOOD = &HFFDEB887~& ' _RGB32(222,184,135)
CONST BURNTORANGE = &HFFFF7F49~& '_RGB32(255,127,73)
CONST BURNTSIENNA = &HFFEA7E5D~& '_RGB32(234,126,93)
CONST CADETBLUE = &HFF5F9EA0~& ' _RGB32(95,158,160)
CONST CANARY = &HFFFFFF99~& '_RGB32(255,255,153)
CONST CARIBBEANGREEN = &HFF1CD3A2~& '_RGB32(28,211,162)
CONST CARNATIONPINK = &HFFFFAACC~& '_RGB32(255,170,204)
CONST CERISE = &HFFDD4492~& '_RGB32(221,68,146)
CONST CERULEAN = &HFF1DACD6~& '_RGB32(29,172,214)
CONST CHARTREUSE = &HFF7FFF00~& ' _RGB32(127,255,0)
CONST CHESTNUT = &HFFBC5D58~& '_RGB32(188,93,88)
CONST CHOCOLATE = &HFFD2691E~& ' _RGB32(210,105,30)
CONST COPPER = &HFFDD9475~& '_RGB32(221,148,117)
CONST CORAL = &HFFFF7F50~& ' _RGB32(255,127,80)
CONST CORNFLOWER = &HFF9ACEEB~& '_RGB32(154,206,235)
CONST CORNFLOWERBLUE = &HFF6495ED~& ' _RGB32(100,149,237)
CONST CORNSILK = &HFFFFF8DC~& ' _RGB32(255,248,220)
CONST COTTONCANDY = &HFFFFBCD9~& '_RGB32(255,188,217)
CONST CRAYOLAAQUAMARINE = &HFF78DBE2~& '_RGB32(120,219,226)
CONST CRAYOLABLUE = &HFF1F75FE~& '_RGB32(31,117,254)
CONST CRAYOLABLUEVIOLET = &HFF7366BD~& '_RGB32(115,102,189)
CONST CRAYOLABROWN = &HFFB4674D~& '_RGB32(180,103,77)
CONST CRAYOLACADETBLUE = &HFFB0B7C6~& '_RGB32(176,183,198)
CONST CRAYOLAFORESTGREEN = &HFF6DAE81~& '_RGB32(109,174,129)
CONST CRAYOLAGOLD = &HFFE7C697~& '_RGB32(231,198,151)
CONST CRAYOLAGOLDENROD = &HFFFCD975~& '_RGB32(252,217,117)
CONST CRAYOLAGRAY = &HFF95918C~& '_RGB32(149,145,140)
CONST CRAYOLAGREEN = &HFF1CAC78~& '_RGB32(28,172,120)
CONST CRAYOLAGREENYELLOW = &HFFF0E891~& '_RGB32(240,232,145)
CONST CRAYOLAINDIGO = &HFF5D76CB~& '_RGB32(93,118,203)
CONST CRAYOLALAVENDER = &HFFFCB4D5~& '_RGB32(252,180,213)
CONST CRAYOLAMAGENTA = &HFFF664AF~& '_RGB32(246,100,175)
CONST CRAYOLAMAROON = &HFFC8385A~& '_RGB32(200,56,90)
CONST CRAYOLAMIDNIGHTBLUE = &HFF1A4876~& '_RGB32(26,72,118)
CONST CRAYOLAORANGE = &HFFFF7538~& '_RGB32(255,117,56)
CONST CRAYOLAORANGERED = &HFFFF2B2B~& '_RGB32(255,43,43)
CONST CRAYOLAORCHID = &HFFE6A8D7~& '_RGB32(230,168,215)
CONST CRAYOLAPLUM = &HFF8E4585~& '_RGB32(142,69,133)
CONST CRAYOLARED = &HFFEE204D~& '_RGB32(238,32,77)
CONST CRAYOLASALMON = &HFFFF9BAA~& '_RGB32(255,155,170)
CONST CRAYOLASEAGREEN = &HFF9FE2BF~& '_RGB32(159,226,191)
CONST CRAYOLASILVER = &HFFCDC5C2~& '_RGB32(205,197,194)
CONST CRAYOLASKYBLUE = &HFF80DAEB~& '_RGB32(128,218,235)
CONST CRAYOLASPRINGGREEN = &HFFECEABE~& '_RGB32(236,234,190)
CONST CRAYOLATANN = &HFFFAA76C~& '_RGB32(250,167,108)
CONST CRAYOLATHISTLE = &HFFEBC7DF~& '_RGB32(235,199,223)
CONST CRAYOLAVIOLET = &HFF926EAE~& '_RGB32(146,110,174)
CONST CRAYOLAYELLOW = &HFFFCE883~& '_RGB32(252,232,131)
CONST CRAYOLAYELLOWGREEN = &HFFC5E384~& '_RGB32(197,227,132)
CONST CRIMSON = &HFFDC143C~& ' _RGB32(220,20,60)
CONST CYAN = &HFF00FFFF~& ' _RGB32(0,255,255)
CONST DANDELION = &HFFFDDB6D~& '_RGB32(253,219,109)
CONST DARKBLUE = &HFF00008B~& ' _RGB32(0,0,139)
CONST DARKCYAN = &HFF008B8B~& ' _RGB32(0,139,139)
CONST DARKGOLDENROD = &HFFB8860B~& ' _RGB32(184,134,11)
CONST DARKGRAY = &HFFA9A9A9~& ' _RGB32(169,169,169)
CONST DARKGREEN = &HFF006400~& ' _RGB32(0,100,0)
CONST DARKKHAKI = &HFFBDB76B~& ' _RGB32(189,183,107)
CONST DARKMAGENTA = &HFF8B008B~& ' _RGB32(139,0,139)
CONST DARKOLIVEGREEN = &HFF556B2F~& ' _RGB32(85,107,47)
CONST DARKORANGE = &HFFFF8C00~& ' _RGB32(255,140,0)
CONST DARKORCHID = &HFF9932CC~& ' _RGB32(153,50,204)
CONST DARKRED = &HFF8B0000~& ' _RGB32(139,0,0)
CONST DARKSALMON = &HFFE9967A~& ' _RGB32(233,150,122)
CONST DARKSEAGREEN = &HFF8FBC8F~& ' _RGB32(143,188,143)
CONST DARKSLATEBLUE = &HFF483D8B~& ' _RGB32(72,61,139)
CONST DARKSLATEGRAY = &HFF2F4F4F~& ' _RGB32(47,79,79)
CONST DARKTURQUOISE = &HFF00CED1~& ' _RGB32(0,206,209)
CONST DARKVIOLET = &HFF9400D3~& ' _RGB32(148,0,211)
CONST DEEPPINK = &HFFFF1493~& ' _RGB32(255,20,147)
CONST DEEPSKYBLUE = &HFF00BFFF~& ' _RGB32(0,191,255)
CONST DENIM = &HFF2B6CC4~& '_RGB32(43,108,196)
CONST DESERTSAND = &HFFEFCDB8~& '_RGB32(239,205,184)
CONST DIMGRAY = &HFF696969~& ' _RGB32(105,105,105)
CONST DODGERBLUE = &HFF1E90FF~& ' _RGB32(30,144,255)
CONST EGGPLANT = &HFF6E5160~& '_RGB32(110,81,96)
CONST ELECTRICLIME = &HFFCEFF1D~& '_RGB32(206,255,29)
CONST FERN = &HFF71BC78~& '_RGB32(113,188,120)
CONST FIREBRICK = &HFFB22222~& ' _RGB32(178,34,34)
CONST FLORALWHITE = &HFFFFFAF0~& ' _RGB32(255,250,240)
CONST FORESTGREEN = &HFF228B22~& ' _RGB32(34,139,34)
CONST FUCHSIA = &HFFC364C5~& '_RGB32(195,100,197)
CONST FUZZYWUZZY = &HFFCC6666~& '_RGB32(204,102,102)
CONST GAINSBORO = &HFFDCDCDC~& ' _RGB32(220,220,220)
CONST GHOSTWHITE = &HFFF8F8FF~& ' _RGB32(248,248,255)
CONST GOLD = &HFFFFD700~& ' _RGB32(255,215,0)
CONST GOLDENROD = &HFFDAA520~& ' _RGB32(218,165,32)
CONST GRANNYSMITHAPPLE = &HFFA8E4A0~& '_RGB32(168,228,160)
CONST GRAY = &HFF808080~& ' _RGB32(128,128,128)
CONST GREEN = &HFF008000~& ' _RGB32(0,128,0)
CONST GREENBLUE = &HFF1164B4~& '_RGB32(17,100,180)
CONST GREENYELLOW = &HFFADFF2F~& ' _RGB32(173,255,47)
CONST HONEYDEW = &HFFF0FFF0~& ' _RGB32(240,255,240)
CONST HOTMAGENTA = &HFFFF1DCE~& '_RGB32(255,29,206)
CONST HOTPINK = &HFFFF69B4~& ' _RGB32(255,105,180)
CONST INCHWORM = &HFFB2EC5D~& '_RGB32(178,236,93)
CONST INDIANRED = &HFFCD5C5C~& ' _RGB32(205,92,92)
CONST INDIGO = &HFF4B0082~& ' _RGB32(75,0,130)
CONST IVORY = &HFFFFFFF0~& ' _RGB32(255,255,240)
CONST JAZZBERRYJAM = &HFFCA3767~& '_RGB32(202,55,103)
CONST JUNGLEGREEN = &HFF3BB08F~& '_RGB32(59,176,143)
CONST KHAKI = &HFFF0E68C~& ' _RGB32(240,230,140)
CONST LASERLEMON = &HFFFEFE22~& '_RGB32(254,254,34)
CONST LAVENDER = &HFFE6E6FA~& ' _RGB32(230,230,250)
CONST LAVENDERBLUSH = &HFFFFF0F5~& ' _RGB32(255,240,245)
CONST LAWNGREEN = &HFF7CFC00~& ' _RGB32(124,252,0)
CONST LEMONCHIFFON = &HFFFFFACD~& ' _RGB32(255,250,205)
CONST LEMONYELLOW = &HFFFFF44F~& '_RGB32(255,244,79)
CONST LIGHTBLUE = &HFFADD8E6~& ' _RGB32(173,216,230)
CONST LIGHTCORAL = &HFFF08080~& ' _RGB32(240,128,128)
CONST LIGHTCYAN = &HFFE0FFFF~& ' _RGB32(224,255,255)
CONST LIGHTGOLDENRODYELLOW = &HFFFAFAD2~& ' _RGB32(250,250,210)
CONST LIGHTGRAY = &HFFD3D3D3~& ' _RGB32(211,211,211)
CONST LIGHTGREEN = &HFF90EE90~& ' _RGB32(144,238,144)
CONST LIGHTPINK = &HFFFFB6C1~& ' _RGB32(255,182,193)
CONST LIGHTSALMON = &HFFFFA07A~& ' _RGB32(255,160,122)
CONST LIGHTSEAGREEN = &HFF20B2AA~& ' _RGB32(32,178,170)
CONST LIGHTSKYBLUE = &HFF87CEFA~& ' _RGB32(135,206,250)
CONST LIGHTSLATEGRAY = &HFF778899~& ' _RGB32(119,136,153)
CONST LIGHTSTEELBLUE = &HFFB0C4DE~& ' _RGB32(176,196,222)
CONST LIGHTYELLOW = &HFFFFFFE0~& ' _RGB32(255,255,224)
CONST LIME = &HFF00FF00~& ' _RGB32(0,255,0)
CONST LIMEGREEN = &HFF32CD32~& ' _RGB32(50,205,50)
CONST LINEN = &HFFFAF0E6~& ' _RGB32(250,240,230)
CONST MACARONIANDCHEESE = &HFFFFBD88~& '_RGB32(255,189,136)
CONST MAGENTA = &HFFFF00FF~& ' _RGB32(255,0,255)
CONST MAGICMINT = &HFFAAF0D1~& '_RGB32(170,240,209)
CONST MAHOGANY = &HFFCD4A4C~& '_RGB32(205,74,76)
CONST MAIZE = &HFFEDD19C~& '_RGB32(237,209,156)
CONST MANATEE = &HFF979AAA~& '_RGB32(151,154,170)
CONST MANGOTANGO = &HFFFF8243~& '_RGB32(255,130,67)
CONST MAROON = &HFF800000~& ' _RGB32(128,0,0)
CONST MAUVELOUS = &HFFEF98AA~& '_RGB32(239,152,170)
CONST MEDIUMAQUAMARINE = &HFF66CDAA~& ' _RGB32(102,205,170)
CONST MEDIUMBLUE = &HFF0000CD~& ' _RGB32(0,0,205)
CONST MEDIUMORCHID = &HFFBA55D3~& ' _RGB32(186,85,211)
CONST MEDIUMPURPLE = &HFF9370DB~& ' _RGB32(147,112,219)
CONST MEDIUMSEAGREEN = &HFF3CB371~& ' _RGB32(60,179,113)
CONST MEDIUMSLATEBLUE = &HFF7B68EE~& ' _RGB32(123,104,238)
CONST MEDIUMSPRINGGREEN = &HFF00FA9A~& ' _RGB32(0,250,154)
CONST MEDIUMTURQUOISE = &HFF48D1CC~& ' _RGB32(72,209,204)
CONST MEDIUMVIOLETRED = &HFFC71585~& ' _RGB32(199,21,133)
CONST MELON = &HFFFDBCB4~& '_RGB32(253,188,180)
CONST MIDNIGHTBLUE = &HFF191970~& ' _RGB32(25,25,112)
CONST MINTCREAM = &HFFF5FFFA~& ' _RGB32(245,255,250)
CONST MISTYROSE = &HFFFFE4E1~& ' _RGB32(255,228,225)
CONST MOCCASIN = &HFFFFE4B5~& ' _RGB32(255,228,181)
CONST MOUNTAINMEADOW = &HFF30BA8F~& '_RGB32(48,186,143)
CONST MULBERRY = &HFFC54B8C~& '_RGB32(197,75,140)
CONST NAVAJOWHITE = &HFFFFDEAD~& ' _RGB32(255,222,173)
CONST NAVY = &HFF000080~& ' _RGB32(0,0,128)
CONST NAVYBLUE = &HFF1974D2~& '_RGB32(25,116,210)
CONST NEONCARROT = &HFFFFA343~& '_RGB32(255,163,67)
CONST OLDLACE = &HFFFDF5E6~& ' _RGB32(253,245,230)
CONST OLIVE = &HFF808000~& ' _RGB32(128,128,0)
CONST OLIVEDRAB = &HFF6B8E23~& ' _RGB32(107,142,35)
CONST OLIVEGREEN = &HFFBAB86C~& '_RGB32(186,184,108)
CONST ORANGE = &HFFFFA500~& ' _RGB32(255,165,0)
CONST ORANGERED = &HFFFF4500~& ' _RGB32(255,69,0)
CONST ORANGEYELLOW = &HFFF8D568~& '_RGB32(248,213,104)
CONST ORCHID = &HFFDA70D6~& ' _RGB32(218,112,214)
CONST OUTERSPACE = &HFF414A4C~& '_RGB32(65,74,76)
CONST OUTRAGEOUSORANGE = &HFFFF6E4A~& '_RGB32(255,110,74)
CONST PACIFICBLUE = &HFF1CA9C9~& '_RGB32(28,169,201)
CONST PALEGOLDENROD = &HFFEEE8AA~& ' _RGB32(238,232,170)
CONST PALEGREEN = &HFF98FB98~& ' _RGB32(152,251,152)
CONST PALETURQUOISE = &HFFAFEEEE~& ' _RGB32(175,238,238)
CONST PALEVIOLETRED = &HFFDB7093~& ' _RGB32(219,112,147)
CONST PAPAYAWHIP = &HFFFFEFD5~& ' _RGB32(255,239,213)
CONST PEACH = &HFFFFCFAB~& '_RGB32(255,207,171)
CONST PEACHPUFF = &HFFFFDAB9~& ' _RGB32(255,218,185)
CONST PERIWINKLE = &HFFC5D0E6~& '_RGB32(197,208,230)
CONST PERU = &HFFCD853F~& ' _RGB32(205,133,63)
CONST PIGGYPINK = &HFFFDDDE6~& '_RGB32(253,221,230)
CONST PINEGREEN = &HFF158078~& '_RGB32(21,128,120)
CONST PINK = &HFFFFC0CB~& ' _RGB32(255,192,203)
CONST PINKFLAMINGO = &HFFFC74FD~& '_RGB32(252,116,253)
CONST PINKSHERBET = &HFFF78FA7~& '_RGB32(247,143,167)
CONST PLUM = &HFFDDA0DD~& ' _RGB32(221,160,221)
CONST POWDERBLUE = &HFFB0E0E6~& ' _RGB32(176,224,230)
CONST PURPLE = &HFF800080~& ' _RGB32(128,0,128)
CONST PURPLEHEART = &HFF7442C8~& '_RGB32(116,66,200)
CONST PURPLEMOUNTAINSMAJESTY = &HFF9D81BA~& '_RGB32(157,129,186)
CONST PURPLEPIZZAZZ = &HFFFE4EDA~& '_RGB32(254,78,218)
CONST RADICALRED = &HFFFF496C~& '_RGB32(255,73,108)
CONST RAWSIENNA = &HFFD68A59~& '_RGB32(214,138,89)
CONST RAWUMBER = &HFF714B23~& '_RGB32(113,75,35)
CONST RAZZLEDAZZLEROSE = &HFFFF48D0~& '_RGB32(255,72,208)
CONST RAZZMATAZZ = &HFFE3256B~& '_RGB32(227,37,107)
CONST RED = &HFFFF0000~& ' _RGB32(255,0,0)
CONST REDORANGE = &HFFFF5349~& '_RGB32(255,83,73)
CONST REDVIOLET = &HFFC0448F~& '_RGB32(192,68,143)
CONST ROBINSEGGBLUE = &HFF1FCECB~& '_RGB32(31,206,203)
CONST ROSYBROWN = &HFFBC8F8F~& ' _RGB32(188,143,143)
CONST ROYALBLUE = &HFF4169E1~& ' _RGB32(65,105,225)
CONST ROYALPURPLE = &HFF7851A9~& '_RGB32(120,81,169)
CONST SADDLEBROWN = &HFF8B4513~& ' _RGB32(139,69,19)
CONST SALMON = &HFFFA8072~& ' _RGB32(250,128,114)
CONST SANDYBROWN = &HFFF4A460~& ' _RGB32(244,164,96)
CONST SCARLET = &HFFFC2847~& '_RGB32(252,40,71)
CONST SCREAMINGREEN = &HFF76FF7A~& '_RGB32(118,255,122)
CONST SEAGREEN = &HFF2E8B57~& ' _RGB32(46,139,87)
CONST SEASHELL = &HFFFFF5EE~& ' _RGB32(255,245,238)
CONST SEPIA = &HFFA5694F~& '_RGB32(165,105,79)
CONST SHADOW = &HFF8A795D~& '_RGB32(138,121,93)
CONST SHAMROCK = &HFF45CEA2~& '_RGB32(69,206,162)
CONST SHOCKINGPINK = &HFFFB7EFD~& '_RGB32(251,126,253)
CONST SIENNA = &HFFA0522D~& ' _RGB32(160,82,45)
CONST SILVER = &HFFC0C0C0~& ' _RGB32(192,192,192)
CONST SKYBLUE = &HFF87CEEB~& ' _RGB32(135,206,235)
CONST SLATEBLUE = &HFF6A5ACD~& ' _RGB32(106,90,205)
CONST SLATEGRAY = &HFF708090~& ' _RGB32(112,128,144)
CONST SNOW = &HFFFFFAFA~& ' _RGB32(255,250,250)
CONST SPRINGGREEN = &HFF00FF7F~& ' _RGB32(0,255,127)
CONST STEELBLUE = &HFF4682B4~& ' _RGB32(70,130,180)
CONST SUNGLOW = &HFFFFCF48~& '_RGB32(255,207,72)
CONST SUNSETORANGE = &HFFFD5E53~& '_RGB32(253,94,83)
CONST TANN = &HFFD2B48C~& ' _RGB32(210,180,140)
CONST TEAL = &HFF008080~& ' _RGB32(0,128,128)
CONST TEALBLUE = &HFF18A7B5~& '_RGB32(24,167,181)
CONST THISTLE = &HFFD8BFD8~& ' _RGB32(216,191,216)
CONST TICKLEMEPINK = &HFFFC89AC~& '_RGB32(252,137,172)
CONST TIMBERWOLF = &HFFDBD7D2~& '_RGB32(219,215,210)
CONST TOMATO = &HFFFF6347~& ' _RGB32(255,99,71)
CONST TROPICALRAINFOREST = &HFF17806D~& '_RGB32(23,128,109)
CONST TUMBLEWEED = &HFFDEAA88~& '_RGB32(222,170,136)
CONST TURQUOISE = &HFF40E0D0~& ' _RGB32(64,224,208)
CONST TURQUOISEBLUE = &HFF77DDE7~& '_RGB32(119,221,231)
CONST UNMELLOWYELLOW = &HFFFFFF66~& '_RGB32(255,255,102)
CONST VIOLET = &HFFEE82EE~& ' _RGB32(238,130,238)
CONST VIOLETBLUE = &HFF324AB2~& '_RGB32(50,74,178)
CONST VIOLETRED = &HFFF75394~& '_RGB32(247,83,148)
CONST VIVIDTANGERINE = &HFFFFA089~& '_RGB32(255,160,137)
CONST VIVIDVIOLET = &HFF8F509D~& '_RGB32(143,80,157)
CONST WHEAT = &HFFF5DEB3~& ' _RGB32(245,222,179)
CONST WHITE = &HFFFFFFFF~& ' _RGB32(255,255,255)
CONST WHITESMOKE = &HFFF5F5F5~& ' _RGB32(245,245,245)
CONST WILDBLUEYONDER = &HFFA2ADD0~& '_RGB32(162,173,208)
CONST WILDSTRAWBERRY = &HFFFF43A4~& '_RGB32(255,67,164)
CONST WILDWATERMELON = &HFFFC6C85~& '_RGB32(252,108,133)
CONST WISTERIA = &HFFCDA4DE~& '_RGB32(205,164,222)
CONST YELLOW = &HFFFFFF00~& ' _RGB32(255,255,0)
CONST YELLOWGREEN = &HFF9ACD32~& ' _RGB32(154,205,50)
CONST YELLOWORANGE = &HFFFFAE42~& '_RGB32(255,174,66)

CONST SW = 800
CONST SH = 600
CONST MAPWIDTH = 100 ' 100 on 800 * 600 => 8 pixel width
CONST MAPHEIGHT = 100 ' 100 on 800 * 600 => 6 pixel height
CONST MINX = 1
CONST MAXX = MAPWIDTH
CONST MINY = 1
CONST MAXY = MAPHEIGHT
CONST SQUAREWIDTH = SW / MAPWIDTH
CONST SQUAREHEIGHT = SH / MAPHEIGHT
CONST COST = 1 ' move cost from one square to another; horizontal/vertical = diagonal
CONST YOUSHALLNOTPASS = 32000 ' !! signed integer, stay within positive values

TYPE typeNode
    id AS INTEGER ' calculated as y * MAPWIDTH + x
    x AS INTEGER
    y AS INTEGER
    f AS SINGLE '   f(x) = g(x) + c + h(x)
    p AS INTEGER '  previous Node (nodeID)
    oo AS INTEGER ' 1 = on OpenList
    oc AS INTEGER ' 1 = on ClosedList
END TYPE

DIM SHARED Nodes(0 TO (MAXY - MINY) * MAPWIDTH + (MAXX - MINX)) AS typeNode
DIM SHARED Map(MINX TO MAXX, MINY TO MAXY) AS INTEGER
DIM SHARED startX AS INTEGER
DIM SHARED startY AS INTEGER
DIM SHARED endX AS INTEGER
DIM SHARED endY AS INTEGER
DIM SHARED bPathFound AS INTEGER
DIM SHARED bNoPathFound AS INTEGER
DIM SHARED startID AS INTEGER
DIM SHARED endID AS INTEGER
DIM id AS INTEGER
DIM a AS STRING

' #############################################################################################################
' <- Definitions
' -> Initialization
' #############################################################################################################

SCREEN _NEWIMAGE(SW, SH, 32)

DO
    CLS

    bPathFound = 0
    bNoPathFound = 0
    startX = 6
    startY = MAPHEIGHT - 6
    endX = MAPWIDTH - 6
    endY = 6

    InitNodes
    InitMap
    SetWall INT(MAPWIDTH / 2), INT(MAPHEIGHT / 4), INT(MAPWIDTH / 2) + 1, MAPHEIGHT - 5
    SetWall INT(MAPWIDTH / 2) + 1, MAPHEIGHT - 6, INT(MAPWIDTH / 3), MAPHEIGHT - 7
    FOR id = 1 TO 250
        RandomBlock
    NEXT
    PaintMap
    ShowCrow

    endID = GetIdFromXY(endX, endY)
    id = GetIdFromXY(startX, startY)
    startID = id
    Nodes(id).x = startX
    Nodes(id).y = startY
    Nodes(id).id = id
    Nodes(id).f = SQR(((startX - endX) ^ 2) + ((startY - endY) ^ 2)) ' only h(x)
    Nodes(id).p = 0
    Nodes(id).oo = 1 ' put on open list
    Nodes(id).oc = 0

    ' #############################################################################################################
    ' <- Initialization
    ' -> Main
    ' #############################################################################################################

    DO
        _LIMIT 1000
        GetNeighbours

    LOOP WHILE (bPathFound = 0) AND (bNoPathFound = 0)

    LOCATE 1, 1
    IF bPathFound = 1 THEN
        PRINT "Path found!"
        ShowPath
    ELSEIF bNoPathFound = 1 THEN
        PRINT "No path found!"
    ELSE
        PRINT "Nothing"
    END IF

    DO
        a = INKEY$
    LOOP WHILE a = ""

LOOP WHILE a <> CHR$(27)
SYSTEM

' #############################################################################################################
' <- Main
' -> helper
' #############################################################################################################

FUNCTION GetIdFromXY (x AS INTEGER, y AS INTEGER)
    GetIdFromXY = (y - MINY) * MAPWIDTH + (x - MINX)
END FUNCTION

' #############################################################################################################
' <- helper
' -> pathfinding SUBs
' #############################################################################################################

SUB GetNeighbours

    DIM x AS INTEGER, y AS INTEGER, x1 AS INTEGER, y1 AS INTEGER
    DIM id AS INTEGER
    DIM ooid AS INTEGER
    DIM f AS SINGLE

    ooid = GetMinFromOpenList
    IF ooid = 0 THEN ' nothing on open list
        bNoPathFound = 1
        EXIT SUB
    END IF

    x1 = Nodes(ooid).x
    y1 = Nodes(ooid).y

    IF ooid <> startID THEN
        PaintBlock ooid, GOLD
    END IF

    FOR y = y1 - 1 TO y1 + 1 STEP 1
        IF y >= MINY AND y <= MAXY THEN
            FOR x = x1 - 1 TO x1 + 1 STEP 1
                IF x >= MINX AND x <= MAXX THEN
                    id = GetIdFromXY(x, y)
                    IF id <> startID THEN
                        IF Nodes(id).oc = 0 THEN ' not yet on closed list
                            IF id <> startID THEN
                                PaintBlock id, AQUA
                            END IF
                            f = Nodes(ooid).f + Map(x, y) + SQR(((x - endX) ^ 2) + ((y - endY) ^ 2))
                            IF id <> endID THEN
                                IF Nodes(id).oo THEN ' is on open list
                                    IF Nodes(id).f > f THEN
                                        Nodes(id).p = Nodes(ooid).id
                                        Nodes(id).f = f
                                    END IF
                                ELSE ' not yet on open list
                                    Nodes(id).f = f
                                    Nodes(id).p = Nodes(ooid).id
                                    Nodes(id).oo = 1 ' put on open list
                                    IF id <> startID THEN
                                        PaintBlock id, DARKORANGE
                                    END IF
                                END IF
                            ELSE
                                Nodes(id).p = Nodes(ooid).id
                                bPathFound = 1
                                EXIT SUB
                            END IF
                        ELSE
                            IF id <> startID THEN
                                PaintBlock id, GRAY
                            END IF
                        END IF
                    END IF
                END IF
            NEXT
        END IF
    NEXT

    Nodes(ooid).oc = 1
    Nodes(ooid).oo = 0
    IF ooid <> startID THEN
        PaintBlock ooid, BLACK 'SILVER
    END IF
END SUB

FUNCTION GetMinFromOpenList% ()
    DIM i AS INTEGER, id AS INTEGER
    DIM minf AS SINGLE

    minf = 99999.9
    id = 0

    FOR i = 0 TO MAXX * MAXY - 1
        IF Nodes(i).oo = 1 THEN
            IF Nodes(i).f > 0 THEN
                IF Nodes(i).f < minf THEN
                    minf = Nodes(i).f
                    id = i
                END IF
            END IF
        END IF
    NEXT
    GetMinFromOpenList = id
END FUNCTION


SUB InitNodes
    DIM x AS INTEGER, y AS INTEGER, id AS INTEGER

    FOR y = MINY TO MAXY
        FOR x = MINX TO MAXX
            id = GetIdFromXY(x, y)
            Nodes(id).id = id
            Nodes(id).x = x
            Nodes(id).y = y
            Nodes(id).f = 0
            Nodes(id).p = 0
            Nodes(id).oo = 0
            Nodes(id).oc = 0
        NEXT
    NEXT

END SUB

' #############################################################################################################
' <- pathfinding SUBs
' -> map related non graphical Subs
' #############################################################################################################

SUB InitMap
    DIM x AS INTEGER, x1 AS INTEGER, x2 AS INTEGER
    DIM y AS INTEGER, y1 AS INTEGER, y2 AS INTEGER

    FOR y = MINY TO MAXY
        y1 = (y - MINY) * SQUAREHEIGHT
        y2 = y1 + SQUAREHEIGHT - 1
        FOR x = MINX TO MAXX
            Map(x, y) = 1
            x1 = (x - MINX) * SQUAREWIDTH
            x2 = x1 + SQUAREWIDTH - 1
        NEXT
    NEXT

END SUB

SUB SetWall (x1, y1, x2, y2)
    DIM x AS INTEGER, y AS INTEGER

    IF x1 > x2 THEN
        x = x1
        x1 = x2
        x2 = x
    END IF

    IF y1 > y2 THEN
        y = y1
        y1 = y2
        y2 = y
    END IF


    FOR y = y1 TO y2
        FOR x = x1 TO x2
            Map(x, y) = YOUSHALLNOTPASS
        NEXT
    NEXT
END SUB

SUB RandomBlock
    DIM x1 AS INTEGER, y1 AS INTEGER, x2 AS INTEGER, y2 AS INTEGER
    DIM n AS INTEGER

    n = INT(RND * 5) + 1
    x1 = INT(RND * (MAPWIDTH - n - 2)) + 1
    x2 = x1 + n - 1

    n = INT(RND * 5) + 1
    y1 = INT(RND * (MAPHEIGHT - n - 2)) + 1
    y2 = y1 + n - 1

    SetWall x1, y1, x2, y2

END SUB

' #############################################################################################################
' <- map related non graphical Subs
' -> map related graphical Subs
' #############################################################################################################

SUB PaintMap
    DIM x AS INTEGER, x1 AS INTEGER, x2 AS INTEGER
    DIM y AS INTEGER, y1 AS INTEGER, y2 AS INTEGER
    DIM col AS LONG

    CLS
    FOR y = MINY TO MAXY
        y1 = (y - MINY) * SQUAREHEIGHT
        y2 = y1 + SQUAREHEIGHT - 1
        FOR x = MINX TO MAXX
            x1 = (x - MINX) * SQUAREWIDTH
            x2 = x1 + SQUAREWIDTH - 1
            IF Map(x, y) < YOUSHALLNOTPASS THEN
                col = FERN
            ELSE
                col = BLACK
            END IF
            LINE (x1, y1)-(x2, y2), col, BF
            LINE (x1, y1)-(x2, y2), BLACK, B
        NEXT
    NEXT

    PlaceStartEnd startX, startY, MAROON
    PlaceStartEnd endX, endY, LAWNGREEN

END SUB

SUB PlaceStartEnd (x AS INTEGER, y AS INTEGER, col AS LONG)
    DIM x1 AS INTEGER, x2 AS INTEGER, y1 AS INTEGER, y2 AS INTEGER

    x1 = (x - MINX) * SQUAREWIDTH
    x2 = x1 + SQUAREWIDTH - 1
    y1 = (y - MINY) * SQUAREHEIGHT
    y2 = y1 + SQUAREHEIGHT - 1
    LINE (x1, y1)-(x2, y2), col, BF

END SUB

SUB ShowCrow
    LINE ((startX - MINX) * SQUAREWIDTH, (startY - MINY) * SQUAREHEIGHT)-((endX - MINX) * SQUAREWIDTH, (endY - MINY) * SQUAREHEIGHT), WHITE
END SUB

SUB ShowPath
    DIM x AS INTEGER, x1 AS INTEGER, x2 AS INTEGER
    DIM y AS INTEGER, y1 AS INTEGER, y2 AS INTEGER
    DIM id AS INTEGER, zid AS INTEGER

    PaintMap

    zid = GetIdFromXY(startX, startY)
    id = GetIdFromXY(endX, endY)

    IF Nodes(id).p THEN

        WHILE id <> zid
            x = Nodes(Nodes(id).p).x
            y = Nodes(Nodes(id).p).y
            y1 = (y - MINY) * SQUAREHEIGHT
            y2 = y1 + SQUAREHEIGHT - 1
            x1 = (x - MINX) * SQUAREWIDTH
            x2 = x1 + SQUAREWIDTH - 1

            LINE (x1, y1)-(x2, y2), CORNFLOWERBLUE, BF

            id = Nodes(id).p
        WEND
    END IF

    PlaceStartEnd startX, startY, MAROON
    PlaceStartEnd endX, endY, LAWNGREEN

END SUB

SUB PaintBlock (id AS INTEGER, col AS LONG)
    DIM x AS INTEGER, y AS INTEGER
    DIM x1 AS INTEGER, y1 AS INTEGER, x2 AS INTEGER, y2 AS INTEGER

    x = Nodes(id).x
    y = Nodes(id).y

    y1 = (y - MINY) * SQUAREHEIGHT
    y2 = y1 + SQUAREHEIGHT - 1
    x1 = (x - MINX) * SQUAREWIDTH
    x2 = x1 + SQUAREWIDTH - 1

    LINE (x1, y1)-(x2, y2), col, BF

END SUB
