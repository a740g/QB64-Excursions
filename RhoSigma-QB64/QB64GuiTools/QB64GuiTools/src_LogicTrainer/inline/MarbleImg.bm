'============================================================
'=== This file was created with MakeCARR.bas by RhoSigma, ===
'=== you must $INCLUDE this at the end of your program.   ===
'============================================================

'-----------------
'--- Important ---
'-----------------
' If you need to move around this .bm file and its respective .h file
' to fit in your project, then make sure the path in the DECLARE LIBRARY
' statement below does match the actual .h file location. It's best to
' specify a relative path assuming your QB64 installation folder as root.
'---------------------------------------------------------------------

'--- declare C/C++ functions ---
Declare Library "MarbleImg" 'Do not add .h here !!
    Sub ReadMarbleImgData (StrBuf$)
    Function WriteMarbleImgData$ (FileName$, Byval AutoClean%)
End Declare

'---------------------------
'--- ReadMarbleImgArray$ ---
'---------------------------
' This function will read the array(s) you've created with MakeCARR.bas
' into a string, no data will be written to disk. If you rather wanna
' rebuild the original file on disk, then use the write function below.
'
' You may directly pass the returned string to _SNDOPEN, _LOADIMAGE or
' _LOADFONT when using the memory load capabilities of these commands.
'----------
' SYNTAX:
'   arrData$ = ReadMarbleImgArray$
'----------
' RESULT:
'   --- arrData$ ---
'    The data of the embedded file. This is in fact the same as if you
'    had opend the file and read its entire content into a single string.
'---------------------------------------------------------------------
Function ReadMarbleImgArray$
    '--- option _explicit requirements ---
    Dim temp$
    '--- get array & set result ---
    temp$ = Space$(14666) 'Do not change this number !!
    ReadMarbleImgData temp$
    ReadMarbleImgArray$ = temp$
End Function

'----------------------------
'--- WriteMarbleImgArray$ ---
'----------------------------
' This function will write the array(s) you've created with MakeCARR.bas
' back to disk and so it rebuilds the original file.
'
' After the writeback call, only use the returned realFile$ to access the
' written file. It's the full qualified absolute path and filename, which
' is made by expanding your maybe given relative path and an maybe altered
' filename (number added) in order to avoid the overwriting of an already
' existing file with the same name in the given location. By this means
' you'll always have safe access to the file, no matter how your current
' working folder changes during runtime.
'
' If you wish, the written file can automatically be deleted for you when
' your program will end, so you don't need to do the cleanup yourself.
'----------
' SYNTAX:
'   realFile$ = WriteMarbleImgArray$ (wantFile$, autoDel%)
'----------
' INPUTS:
'   --- wantFile$ ---
'    The filename you would like to write the array(s) to, can contain
'    a full or relative path.
'   --- autoDel% ---
'    Shows whether you want the auto cleanup (see description above) at
'    the program end or not (-1 = delete file, 0 = don't delete file).
'----------
' RESULT:
'   --- realFile$ ---
'    - On success this is the full qualified path and filename finally
'      used after all applied checks, use only this returned filename
'      to access the written file.
'    - On failure (write/access) this will be an empty string, so you
'      should check for this before trying to access/open the file.
'---------------------------------------------------------------------
Function WriteMarbleImgArray$ (file$, clean%)
    '--- option _explicit requirements ---
    Dim po%, body$, ext$, num%
    '--- separate filename body & extension ---
    For po% = Len(file$) To 1 Step -1
        If Mid$(file$, po%, 1) = "." Then
            body$ = Left$(file$, po% - 1)
            ext$ = Mid$(file$, po%)
            Exit For
        ElseIf Mid$(file$, po%, 1) = "\" Or Mid$(file$, po%, 1) = "/" Or po% = 1 Then
            body$ = file$
            ext$ = ""
            Exit For
        End If
    Next po%
    '--- avoid overwriting of existing files ---
    num% = 1
    While _FileExists(file$)
        file$ = body$ + "(" + LTrim$(Str$(num%)) + ")" + ext$
        num% = num% + 1
    Wend
    '--- write array & set result ---
    WriteMarbleImgArray$ = WriteMarbleImgData$(file$ + Chr$(0), clean%)
End Function

