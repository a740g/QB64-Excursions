'GUI Library
'Copyright Matt Kilgore -- 2011/2013

'This program is free software, without any warranty of any kind.
'You are free to edit, copy, modify, and redistribute it under the terms
'of the Do What You Want Public License, Version 1, as published by Matt Kilgore
'See file COPYING that should have been included with this source.

$INCLUDEONCE

'$INCLUDE:'mem.bi'

CONST GUI_VER$ = ".97"

CONST GUI_DEBUG = -1 'Set to -1 to turn on debug mode

'Various key codes for _KEYHIT -- Used for keycode in key event
CONST GUI_KEY_CODE_PAUSE = 100019
CONST GUI_KEY_CODE_NUMLOCK = 100300
CONST GUI_KEY_CODE_CAPSLOCK = 100301
CONST GUI_KEY_CODE_SCROLLOCK = 100302
CONST GUI_KEY_CODE_RSHIFT = 100303
CONST GUI_KEY_CODE_LSHIFT = 100304
CONST GUI_KEY_CODE_RCTRL = 100305
CONST GUI_KEY_CODE_LCTRL = 100306
CONST GUI_KEY_CODE_RALT = 100307
CONST GUI_KEY_CODE_LALT = 100308
CONST GUI_KEY_CODE_RAPPLE = 100309 'Left 'Apple' key (MacOSX)
CONST GUI_KEY_CODE_LAPPLE = 100310 'Right 'Apple' key (MacOSX)
CONST GUI_KEY_CODE_LMETA = 100311 'Left "Windows" key
CONST GUI_KEY_CODE_RMETA = 100312 'Right "Windows"key
CONST GUI_KEY_CODE_ALT_GR = 100313 '"AltGr" key
CONST GUI_KEY_CODE_COMPOSE = 100314
CONST GUI_KEY_CODE_HELP = 100315
CONST GUI_KEY_CODE_PRINT = 100316
CONST GUI_KEY_CODE_SYSREQ = 100317
CONST GUI_KEY_CODE_BREAK = 100318
CONST GUI_KEY_CODE_MENU = 100319
CONST GUI_KEY_CODE_POWER = 100320
CONST GUI_KEY_CODE_EURO = 100321
CONST GUI_KEY_CODE_UNDO = 100322
CONST GUI_KEY_CODE_KP0 = 100256
CONST GUI_KEY_CODE_KP1 = 100257
CONST GUI_KEY_CODE_KP2 = 100258
CONST GUI_KEY_CODE_KP3 = 100259
CONST GUI_KEY_CODE_KP4 = 100260
CONST GUI_KEY_CODE_KP5 = 100261
CONST GUI_KEY_CODE_KP7 = 100263
CONST GUI_KEY_CODE_KP8 = 100264
CONST GUI_KEY_CODE_KP9 = 100265
CONST GUI_KEY_CODE_KP_PERIOD = 100266
CONST GUI_KEY_CODE_KP_DIVIDE = 100267
CONST GUI_KEY_CODE_KP_MULTIPLY = 100268
CONST GUI_KEY_CODE_KP_MINUS = 100269
CONST GUI_KEY_CODE_KP_PLUS = 100270
CONST GUI_KEY_CODE_KP_ENTER = 100271
CONST GUI_KEY_CODE_KP_INSERT = 200000
CONST GUI_KEY_CODE_KP_END = 200001
CONST GUI_KEY_CODE_KP_DOWN = 200002
CONST GUI_KEY_CODE_KP_PAGE_DOWN = 200003
CONST GUI_KEY_CODE_KP_LEFT = 200004
CONST GUI_KEY_CODE_KP_MIDDLE = 200005
CONST GUI_KEY_CODE_KP_RIGHT = 200006
CONST GUI_KEY_CODE_KP_HOME = 200007
CONST GUI_KEY_CODE_KP_UP = 200008
CONST GUI_KEY_CODE_KP_PAGE_UP = 200009
CONST GUI_KEY_CODE_KP_DELETE = 200010
CONST GUI_KEY_CODE_SCROLL_LOCK_MODE = 200011
CONST GUI_KEY_CODE_INSERT_MODE = 200012
CONST GUI_KEY_CODE_TAB = 9
CONST GUI_KEY_CODE_BACKSPACE = 8
CONST GUI_KEY_CODE_F1 = 15104
CONST GUI_KEY_CODE_F2 = 15360
CONST GUI_KEY_CODE_F3 = 15616
CONST GUI_KEY_CODE_F4 = 15872
CONST GUI_KEY_CODE_F5 = 16128
CONST GUI_KEY_CODE_F6 = 16384
CONST GUI_KEY_CODE_F7 = 16640
CONST GUI_KEY_CODE_F8 = 16896
CONST GUI_KEY_CODE_F9 = 17152
CONST GUI_KEY_CODE_F10 = 17408
CONST GUI_KEY_CODE_F11 = 34048
CONST GUI_KEY_CODE_F12 = 34304
CONST GUI_KEY_CODE_ESC = 27
CONST GUI_KEY_CODE_DEL = 21248
CONST GUI_KEY_CODE_END = 20224
CONST GUI_KEY_CODE_PGDN = 20736
CONST GUI_KEY_CODE_INSERT = 20992
CONST GUI_KEY_CODE_HOME = 18176
CONST GUI_KEY_CODE_PGUP = 18688
CONST GUI_KEY_CODE_UP = 18432
CONST GUI_KEY_CODE_LEFT = 19200
CONST GUI_KEY_CODE_DOWN = 20480
CONST GUI_KEY_CODE_RIGHT = 19712
CONST GUI_KEY_CODE_ENTER = 13
CONST GUI_KEY_CODE_SPACE = 32

'CONST values coresponding to a element type
CONST GUI_BOX = 1
CONST GUI_INPUT_BOX = 2
CONST GUI_TEXT_BOX = 3
CONST GUI_LIST_BOX = 4
CONST GUI_DROP_DOWN = 5
CONST GUI_CHECKBOX = 6
CONST GUI_MENU = 7
CONST GUI_BUTTON = 8
CONST GUI_RADIO_BUTTON = 9
CONST GUI_LABEL = 10
CONST GUI_FRAME = 11
'CONST GUI_COMBO_BOX     = 11

'Flags for GUI_element_type .flags
CONST GUI_FLAG_UPDATED = &H00000001
CONST GUI_FLAG_SKIP = &H00000002
CONST GUI_FLAG_SHADOW = &H00000004
CONST GUI_FLAG_DIALOG = &H00000008
CONST GUI_FLAG_HIDE = &H00000010
CONST GUI_FLAG_SCROLL_V = &H00000020
CONST GUI_FLAG_SCROLL_H = &H00000040
CONST GUI_FLAG_SCROLL_IS_HELD_V = &H00000080
CONST GUI_FLAG_SCROLL_IS_HELD_H = &H00000100
CONST GUI_FLAG_DROP_FLAG = &H00000200
CONST GUI_FLAG_CHECKED = &H00000400
CONST GUI_FLAG_MENU_OPEN = &H00000800
CONST GUI_FLAG_MENU_ALT = &H00001000
CONST GUI_FLAG_PRESSED = &H00002000
CONST GUI_FLAG_MENU_LAST_ON_RIGHT = &H00004000
CONST GUI_FLAG_CATCH_ALT = &H00008000

CONST GUI_CUT = &H00000001
CONST GUI_COPY = &H00000002
CONST GUI_PASTE = &H00000004
CONST GUI_CLIPBOARD = &H00000008
CONST GUI_RETURN_STR = &H00000010

'Byte 1
CONST GUI_EVENT_MOUSE = 1
CONST GUI_EVENT_KEY = 2

'Specefic element event numbers
CONST GUI_EVENT_ELEMENT_BOX = &H0100
CONST GUI_EVENT_ELEMENT_INPUT_BOX = &H0200
CONST GUI_EVENT_ELEMENT_TEXT_BOX = &H0300
CONST GUI_EVENT_ELEMENT_CHECKBOX = &H0600
CONST GUI_EVENT_ELEMENT_MENU = &H0700
CONST GUI_EVENT_ELEMENT_BASIC = &H0800
CONST GUI_EVENT_ELEMENT_RADIO_BUTTON_GROUP = &H0900

'Event_mouse_type flags
CONST GUI_EVENT_MOUSE_DRAG = &H00000001
CONST GUI_EVENT_MOUSE_LEFT_DOWN = &H00000002
CONST GUI_EVENT_MOUSE_LEFT_UP = &H00000004
CONST GUI_EVENT_MOUSE_LEFT_CLICK = &H00000008
CONST GUI_EVENT_MOUSE_RIGHT_DOWN = &H00000010
CONST GUI_EVENT_MOUSE_RIGHT_UP = &H00000020
CONST GUI_EVENT_MOUSE_RIGHT_CLICK = &H00000040
CONST GUI_EVENT_MOUSE_MIDDLE_DOWN = &H00000080
CONST GUI_EVENT_MOUSE_MIDDLE_UP = &H00000100
CONST GUI_EVENT_MOUSE_MIDDLE_CLICK = &H00000200
CONST GUI_EVENT_MOUSE_SCROLL_UP = &H00000400
CONST GUI_EVENT_MOUSE_SCROLL_DOWN = &H00000800
CONST GUI_EVENT_MOUSE_MOVEMENT = &H00001000

'Event_key_type flags
CONST GUI_EVENT_KEY_PRESSED = &H00000001
CONST GUI_EVENT_KEY_RELEASED = &H00000002
CONST GUI_EVENT_KEY_TYPED = &H00000004
CONST GUI_EVENT_KEY_LEFT_ALT_DOWN = &H00000008
CONST GUI_EVENT_KEY_RIGHT_ALT_DOWN = &H00000010
CONST GUI_EVENT_KEY_LEFT_CTL_DOWN = &H00000020
CONST GUI_EVENT_KEY_RIGHT_CTL_DOWN = &H00000040
CONST GUI_EVENT_KEY_LEFT_SHIFT_DOWN = &H00000080
CONST GUI_EVENT_KEY_RIGHT_SHIFT_DOWN = &H00000100
CONST GUI_EVENT_KEY_LEFT_META_DOWN = &H00000200
CONST GUI_EVENT_KEY_RIGHT_META_DOWN = &H00000400
CONST GUI_EVENT_KEY_LEFT_APPLE_DOWN = &H00000800
CONST GUI_EVENT_KEY_RIGHT_APPLE_DOWN = &H00001000
CONST GUI_EVENT_KEY_ALT_GR_DOWN = &H00002000
CONST GUI_EVENT_KEY_CAPS_LOCK = &H00004080

'Event label flags
CONST GUI_EVENT_ELEMENT_LABEL_PRESSED = &H00000001
CONST GUI_EVENT_ELEMENT_LABEL_CLICKED = &H00000002
CONST GUI_EVENT_ELEMENT_LABEL_KEY_DOWN = &H00000004

'Event button flags
CONST GUI_EVENT_ELEMENT_BUTTON_PRESSED = &H00000001
CONST GUI_EVENT_ELEMENT_BUTTON_CLICKED = &H00000002
CONST GUI_EVENT_ELEMENT_BUTTON_KEY_DOWN = &H00000004

'List box event flags
CONST GUI_EVENT_ELEMENT_LIST_BOX_PRESSED = &H00000001
CONST GUI_EVENT_ELEMENT_LIST_BOX_CLICKED = &H00000002
CONST GUI_EVENT_ELEMENT_LIST_BOX_KEY_DOWN = &H00000004
CONST GUI_EVENT_ELEMENT_LIST_BOX_SEL_CHANGED = &H00000008

'Menu event flags
CONST GUI_EVENT_ELEMENT_MENU_SELECTED = &H00000001
CONST GUI_EVENT_ELEMENT_MENU_MOVEMENT = &H00000002

'Drop-down event flags
CONST GUI_EVENT_ELEMENT_DROP_DOWN_PRESSED = &H00000001
CONST GUI_EVENT_ELEMENT_DROP_DOWN_CLICKED = &H00000002
CONST GUI_EVENT_ELEMENT_DROP_DOWN_KEY_DOWN = &H00000004
CONST GUI_EVENT_ELEMENT_DROP_DOWN_SEL_CHANGED = &H00000008

'Checkbox event flags
CONST GUI_EVENT_ELEMENT_CHECKBOX_CHANGED = &H00000001
CONST GUI_EVENT_ELEMENT_CHECKBOX_CLICKED = &H00000002
CONST GUI_EVENT_ELEMENT_CHECKBOX_KEY_DOWN = &H00000004

'Radiobutton Group event flags
CONST GUI_EVENT_ELEMENT_RADIO_B_G_CHANGED = &H00000001
CONST GUI_EVENT_ELEMENT_RADIO_B_G_KEY_DOWN = &H00000002
CONST GUI_EVENT_ELEMENT_RADIO_B_G_CLICKED = &H00000004

'Scroll bar
'CONST GUI_ELEMENT_SCROLL_BAR_FLAG_SCROLL_V = &H00000001
'CONST GUI_ELEMENT_SCROLL_BAR_FLAG_SCROLL_H = &H00000002
'CONST GUI_ELEMENT_SCROLL_BAR_FLAG_SCROLL_IS_HELD = &H00000004

'GUI_DRAG_FLAG flags
CONST GUI_MOUSE_DRAG_LEFT = 1
CONST GUI_MOUSE_DRAG_RIGHT = 2
CONST GUI_MOUSE_DRAG_MIDDLE = 3

CONST GUI_SIZEOF_MENU_ITEM = MEM_SIZEOF_MEM_STRING + 5 + 1 + MEM_SIZEOF_OFFSET _
                             + 2 + 1 + MEM_SIZEOF_MEM_STRING + 2
TYPE GUI_menu_item
    nam AS MEM_String 'Displayed string for MENU choice
    ident AS STRING * 5 'identifer string
    'The ident string will be returned in menu_choice
    'when a choice is chosen. Use the identifier to match
    'what menu choice they did. More reliable then mapping
    'choices to exact locations in the menu -- they change when you edit the menu

    'support for modifiers will be added at a later date, sorry.
    'modifier as STRING * 2 'INKEY$ return
    has_sub AS _BYTE 'If -1 then sub_menu is set
    sub_menu AS _OFFSET ' _MEM 'Points to an array of GUI_menu_item_type
    sub_menu_length AS INTEGER
    sub_menu_open AS _BYTE
    key_combo AS MEM_String
    selected AS INTEGER 'current
END TYPE

CONST GUI_SIZEOF_COLOR = 1 + 1
TYPE GUI_color 'Holds color info -- forground and background
    fr AS _UNSIGNED _BYTE
    bk AS _UNSIGNED _BYTE
END TYPE

TYPE GUI_location
    row AS _UNSIGNED INTEGER
    col AS _UNSIGNED INTEGER
END TYPE

TYPE GUI_adjustment
    lower AS LONG
    upper AS LONG
    value AS LONG
    step_increment AS LONG
    page_increment AS LONG
    page_size AS LONG
END TYPE

TYPE GUI_component_scroll_bar
    top_left AS GUI_location
    bar_length AS _UNSIGNED INTEGER
    scroll_location AS _UNSIGNED INTEGER
    'Number of items to scroll through
    'These _MEM's should point to LONG's.
    adjustGA AS _OFFSET 'Points to a GUI_adjustment
    flags AS _UNSIGNED INTEGER
END TYPE

TYPE GUI_component_frame
    top_leftGL AS _OFFSET
    bottom_rightGL AS _OFFSET
    flags AS _UNSIGNED INTEGER
END TYPE


TYPE GUI_element_frame
    top_left AS GUI_location
    bottom_right AS GUI_location
    flags AS _UNSIGNED INTEGER
    'Points to a MEM_String
    titleMS AS _OFFSET
    items AS MEM_Array
END TYPE

TYPE GUI_element_text_area
    top_left AS GUI_location
    bottom_right AS GUI_location
  
    box_nam AS MEM_String
  
    vert_scroll AS GUI_component_scroll_bar
    hors_scroll AS GUI_component_scroll_bar
  
    vert_scroll_pos AS LONG
    hors_scroll_pos AS LONG
  
    cur_row AS _UNSIGNED INTEGER
    cur_col AS _UNSIGNED INTEGER
  
    line_count AS LONG
    max_width AS LONG
  
    text AS MEM_Array
    max_lines AS _UNSIGNED INTEGER
    flags AS _UNSIGNED LONG
END TYPE

CONST GUI_SIZEOF_ELEMENT_COLORS = GUI_SIZEOF_COLOR * 3
TYPE GUI_element_colors 'holds colors
    mcolor AS GUI_color
    selcolor AS GUI_color
    scroll_color AS GUI_color
END TYPE

TYPE GUI_element_button
    flags AS _UNSIGNED LONG
END TYPE


TYPE GUI_element_generic
    element_type AS _UNSIGNED INTEGER
    flags AS _UNSIGNED LONG
    ele AS _OFFSET
END TYPE


CONST GUI_SIZEOF_ELEMENT = MEM_SIZEOF_MEM_STRING + 1 + 2 * 4 + 4 + GUI_SIZEOF_ELEMENT_COLORS _
                           + 1 + MEM_SIZEOF_MEM_STRING + 2 * 13 + MEM_SIZEOF_MEM_ARRAY _
                           + MEM_SIZEOF_OFFSET + 2 + 5 + 2 * 6
TYPE GUI_element
    nam AS MEM_String 'name of item
    element_type AS _BYTE
    row1 AS INTEGER 'location
    col1 AS INTEGER
    row2 AS INTEGER
    col2 AS INTEGER
    flags AS _UNSIGNED LONG 'Coresponds to the above flags
    c AS GUI_element_colors
    layer AS _BYTE
    text AS MEM_String 'text drawn/edited in a Input-Box
    text_position AS INTEGER 'position of the cursor in the input
    text_sel_row1 AS INTEGER
    text_sel_row2 AS INTEGER
    text_sel_col1 AS INTEGER
    text_sel_col2 AS INTEGER
  
    scroll_offset_vert AS INTEGER 'current scroll offset -- calculated in draw_gui function
    scroll_offset_hors AS INTEGER
  
    scroll_loc_hors AS INTEGER 'current location of scroll-bar
    scroll_loc_vert AS INTEGER
    scroll_max_hors AS INTEGER 'Max number of characters in a line -- If 0 then will be automatically calculated (Which is a bit slower)
    length AS INTEGER ' Length of string array
    selected AS INTEGER 'selected line in list-box, drop-down, etc.
    selected_old AS INTEGER
    lines AS MEM_Array ' Array to store strings for list-box, drop-down, etc.
    menu AS _OFFSET '_MEM ' Points to an actual array of menu_items
    menu_padding AS INTEGER 'Spaces padded before start of menu
    menu_choice AS STRING * 5
  
    menu_depth AS INTEGER
    menu_sel AS INTEGER
  
    group AS INTEGER 'group number for radio buttons
    cur_row AS INTEGER
    cur_col AS INTEGER
    'This does not corespond to the displayed number of lines, just the real max allocation length of lines
    max_lines AS _UNSIGNED INTEGER 'If 0 then the lines array will automatically be reallocated, else we won't go over max_lines
    'parent AS _MEM
END TYPE

CONST GUI_SIZEOF_MOUSE_STATE = 2 * 6
TYPE GUI_mouse_state '12
    MROW AS INTEGER
    MCOL AS INTEGER
    MRIGHT AS INTEGER
    MLEFT AS INTEGER
    MMIDDLE AS INTEGER
    MSCROLL AS INTEGER
END TYPE

CONST GUI_SIZEOF_EVENT_GENERIC = 4 + MEM_SIZEOF_OFFSET + 1
TYPE GUI_event_generic
    event_type AS _UNSIGNED LONG
    mem AS _OFFSET 'MEM
    allocated AS _UNSIGNED _BYTE
END TYPE

CONST GUI_SIZEOF_EVENT_KEY = 4 + 2
TYPE GUI_event_key '6
    key_code AS _UNSIGNED LONG
    'gui_element AS _UNSIGNED LONG
    flags AS _UNSIGNED INTEGER
END TYPE

CONST GUI_SIZEOF_EVENT_MOUSE = GUI_SIZEOF_MOUSE_STATE + 4 * 2 + 2 * 2
TYPE GUI_event_mouse '28
    'gui_element AS _UNSIGNED LONG
    m AS GUI_mouse_state
    row2 AS _UNSIGNED LONG 'Used if a drag occured
    col2 AS _UNSIGNED LONG
    flags AS INTEGER
    count AS INTEGER
END TYPE

'Represents an event that happened to a generic element
'It's worth nothing this is just here because many element only need a very
'Simple return like this one
CONST GUI_SIZEOF_EVENT_ELEMENT_BASIC = GUI_SIZEOF_EVENT_MOUSE + GUI_SIZEOF_EVENT_KEY + 1 + 1 + 4
TYPE GUI_event_element_basic '48
    m_event AS GUI_event_mouse 'Mouse event that happened on the label
    k_event AS GUI_event_key 'Key event that happened on the label
    flags AS _BYTE
    e_type AS _BYTE
    gui_element AS _UNSIGNED LONG
END TYPE

CONST GUI_SIZEOF_EVENT_ELEMENT_MENU = GUI_SIZEOF_EVENT_MOUSE + GUI_SIZEOF_EVENT_KEY + 5 + 1 + 2 + 2
TYPE GUI_event_element_menu
    m_event AS GUI_event_mouse
    k_event AS GUI_event_key
    mident AS STRING * 5
    flags AS _UNSIGNED _BYTE
    depth AS _UNSIGNED INTEGER
    sel AS _UNSIGNED INTEGER
END TYPE

CONST GUI_SIZEOF_EVENT_ELEMENT_R_B_G = GUI_SIZEOF_EVENT_MOUSE + GUI_SIZEOF_EVENT_KEY + 1 + 2 + 4
TYPE GUI_event_element_radio_button_group
    m_event AS GUI_event_mouse
    k_event AS GUI_event_key
    flags AS _UNSIGNED _BYTE
    group AS _UNSIGNED INTEGER
    gui_element AS _UNSIGNED LONG
END TYPE

'For the event stack
CONST GUI_SIZEOF_EVENT_STACK_LINK = GUI_SIZEOF_EVENT_GENERIC + 1 + MEM_SIZEOF_OFFSET
TYPE GUI_event_stack_link
    g AS GUI_event_generic
    flags AS _UNSIGNED _BYTE
    'e_next AS _MEM 'Pointer to next event
    e_prev AS _OFFSET
END TYPE

'shared variables for mouse, keyboard, and screen type of things
DIM SHARED GUI_MOUSE_LAST_STATE AS GUI_mouse_state, GUI_MOVEMENT_FLAG AS INTEGER
DIM SHARED GUI_PERSISTANT_MOUSE_STATE AS GUI_mouse_state
DIM SHARED GUI_MROW AS INTEGER, GUI_MCOL AS INTEGER, GUI_BUT AS INTEGER
DIM SHARED GUI_MLEFT AS INTEGER, GUI_MRIGHT AS INTEGER, GUI_MMIDDLE AS INTEGER
DIM SHARED GUI_DRAG_FLAG AS INTEGER, GUI_DRAG_ROW AS INTEGER, GUI_DRAG_COL AS INTEGER
DIM SHARED GUI_MSCROLL AS INTEGER, GUI_BUTFLAG AS INTEGER
DIM SHARED GUI_CUR_ROW AS INTEGER, GUI_CUR_COL AS INTEGER

DIM SHARED GUI_RALT_FLAG AS INTEGER, GUI_RAPPLE_FLAG AS INTEGER
DIM SHARED GUI_RCTRL_FLAG AS INTEGER, GUI_RSHIFT_FLAG AS INTEGER, GUI_RMETA_FLAG AS INTEGER
DIM SHARED GUI_LALT_FLAG AS INTEGER, GUI_LAPPLE_FLAG AS INTEGER
DIM SHARED GUI_LCTRL_FLAG AS INTEGER, GUI_LSHIFT_FLAG AS INTEGER, GUI_LMETA_FLAG
DIM SHARED GUI_CAPS_LOCK_FLAG AS INTEGER, GUI_ALT_GR_FLAG AS INTEGER

DIM SHARED GUI_DRAG_TIMER AS DOUBLE
DIM SHARED GUI_RIGHT_CLICK_TIMER AS DOUBLE, GUI_LEFT_CLICK_TIMER AS DOUBLE, GUI_MIDDLE_CLICK_TIMER AS DOUBLE
DIM SHARED GUI_RIGHT_CLICK_COUNT AS INTEGER, GUI_LEFT_CLICK_COUNT AS INTEGER, GUI_MIDDLE_CLICK_COUNT AS INTEGER
DIM SHARED GUI_last_mouse_event AS GUI_event_mouse

DIM SHARED GUI_SELECTED_GUI AS INTEGER
DIM SHARED GUI_ALT_CAUGHT_SEL AS _UNSIGNED LONG, GUI_ALT_CAUGHT_OLD AS _UNSIGNED LONG, GUI_ALT_CAUGHT AS _UNSIGNED _BYTE
DIM SHARED GUI_EVENT_STACK_START AS _OFFSET, GUI_EVENT_STACK_END AS _OFFSET, GUI_EVENT_STACK_LENGTH AS LONG

'Delay values for clicking and keypresses
'When dragging the mouse to select text, if dragging requires scrolling to prevent from scrolling instantly we will only scroll another character after this time in seconds has happened
DIM SHARED GUI_DRAG_SELECTION_DELAY
DIM SHARED GUI_DOUBLE_CLICK_DELAY 'Delay two clicks have to be inbetween to be considered a double click

'default colors -- Values are set by GUI_init and are changable at any time
DIM SHARED GUI_DEFAULT_COLOR_BOX AS GUI_element_colors, GUI_DEFAULT_COLOR_INPUT AS GUI_element_colors
DIM SHARED GUI_DEFAULT_COLOR_TEXT AS GUI_element_colors, GUI_DEFAULT_COLOR_LIST AS GUI_element_colors
DIM SHARED GUI_DEFAULT_COLOR_DROP AS GUI_element_colors, GUI_DEFAULT_COLOR_CHECKBOX AS GUI_element_colors
DIM SHARED GUI_DEFAULT_COLOR_MENU AS GUI_element_colors, GUI_DEFAULT_COLOR_BUTTON AS GUI_element_colors
DIM SHARED GUI_DEFAULT_COLOR_RADIO AS GUI_element_colors, GUI_DEFAULT_COLOR_LABEL AS GUI_element_colors

'Default colors for dialogs
DIM SHARED GUI_DEFAULT_DIALOG_COLOR_BOX AS GUI_element_colors, GUI_DEFAULT_DIALOG_COLOR_INPUT AS GUI_element_colors
DIM SHARED GUI_DEFAULT_DIALOG_COLOR_TEXT AS GUI_element_colors, GUI_DEFAULT_DIALOG_COLOR_LIST AS GUI_element_colors
DIM SHARED GUI_DEFAULT_DIALOG_COLOR_DROP AS GUI_element_colors, GUI_DEFAULT_DIALOG_COLOR_CHECKBOX AS GUI_element_colors
DIM SHARED GUI_DEFAULT_DIALOG_COLOR_MENU AS GUI_element_colors, GUI_DEFAULT_DIALOG_COLOR_BUTTON AS GUI_element_colors
DIM SHARED GUI_DEFAULT_DIALOG_COLOR_RADIO AS GUI_element_colors, GUI_DEFAULT_DIALOG_COLOR_LABEL AS GUI_element_colors
